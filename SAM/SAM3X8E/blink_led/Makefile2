# Makefile
#
# targets:
#   all:    compiles the source code
#   test:   tests the isp connection to the mcu
#   flash:  writes compiled hex file to the mcu's flash memory
#   fuse:   writes the fuse bytes to the MCU
#   disasm: disassembles the code for debugging
#   clean:  removes all .hex, .elf, and .o files in the source code and library directories

# parameters (change this stuff accordingly)
# project name
PRJ = blink_led
# atmel sam mcu
MCU = __SAM3X8E__
# board model
BOARD = "ARDUINO_DUE_X"

F_CPU = 84000000

# program source files (not including external libraries)
SRC = $(PRJ).c

# atmel software framework path
ASF_PATH = /Users/luca/Documents/Embedded/atmel/sam/xdk-asf-3.48.0

# where to look for external libraries (consisting of .c/.cpp files and .h files)
# e.g. EXT = ../../EyeToSee ../../YouSART
EXT = $(ASF_PATH)/thirdparty/CMSIS/include \
			$(ASF_PATH)/common/utils \
			$(ASF_PATH)/common/boards \
			$(ASF_PATH)/common/services \
			$(ASF_PATH)/common/services/clock \
			$(ASF_PATH)/common/services/clock/sam3x/module_config \
			$(ASF_PATH)/sam/boards \
			$(ASF_PATH)/sam/utils \
			$(ASF_PATH)/sam/utils/preprocessor \
			$(ASF_PATH)/sam/utils/header_files \
		  $(ASF_PATH)/sam/utils/cmsis/sam3x/include \
			$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates \
			$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates/gcc \
			$(ASF_PATH)/sam/drivers \
			$(ASF_PATH)/sam/drivers/pmc


# external libraries .c files
EXTSRC = \
$(ASF_PATH)/sam/drivers/pmc/pmc.c\
$(ASF_PATH)/common/services/clock/sam3x/sysclk.c

# external libraries .h files
EXTINC = \


# start-up .c files
BOOTSRC = \
$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates/gcc/startup_sam3x.c \
$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates/system_sam3x.c \
$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates/exceptions.c

# start-up .h files
BOOTINC = \
$(ASF_PATH)/common/utils/parts.h \
$(ASF_PATH)/common/utils/interrupt.h \
$(ASF_PATH)/common/utils/interrupt/interrupt_sam_nvic.h \
$(ASF_PATH)/sam/utils/compiler.h \
$(ASF_PATH)/sam/utils/preprocessor/preprocessor.h \
$(ASF_PATH)/sam/utils/preprocessor/tpaste.h \
$(ASF_PATH)/sam/utils/preprocessor/stringz.h \
$(ASF_PATH)/sam/utils/preprocessor/mrepeat.h \
$(ASF_PATH)/sam/utils/header_files/io.h \
$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates/system_sam3x.h \
$(ASF_PATH)/sam/utils/cmsis/sam3x/source/templates/exceptions.h \
$(ASF_PATH)/sam/utils/cmsis/sam3x/include/sam3xa.h \
$(ASF_PATH)/sam/utils/cmsis/sam3x/include/sam3x8e.h \
$(ASF_PATH)/sam/utils/cmsis/sam3x/include/component/%.h \
$(ASF_PATH)/thirdparty/CMSIS/Include/core_cm3.h \
$(ASF_PATH)/thirdparty/CMSIS/Include/cmsis_version.h \
$(ASF_PATH)/thirdparty/CMSIS/Include/cmsis_compiler.h \
$(ASF_PATH)/thirdparty/CMSIS/Include/cmsis_gcc.h \
$(ASF_PATH)/thirdparty/CMSIS/Include/mpu_armv7.h \



# linker script
LDSCRIPT = $(ASF_PATH)/sam/utils/linker_scripts/sam3x/sam3x8/gcc/flash.ld

#################################################################################################
# \/ stuff nobody needs to worry about until such time that worrying about it is appropriate \/ #
#################################################################################################

# Include path
INCLUDE = -I$(ASF_DIR)/$(EXT_DIR)/$(INC_DIR) -I$(ASF_DIR)/$(BOOT_DIR)/$(INC_DIR)

# C flags
CFLAGS+= -mcpu=cortex-m0 -mthumb -g
CFLAGS+=  $(INCLUDE)
CFLAGS+= -D$(MCU) -DBOARD=$(BOARD)

# Linker flags
LDFLAGS+= -T$(LDSCRIPT) -mthumb -mcpu=cortex-m0 -Wl,--gc-sections

ASF_DIR   = asf
BUILD_DIR = build
BOOT_DIR  = boot
EXT_DIR   = lib
INC_DIR		= inc
SRC_DIR   = src

# .elf file name
ELF = $(PRJ).elf

# executables
CC=arm-none-eabi-gcc
LD=arm-none-eabi-gcc
AR=arm-none-eabi-ar
AS=arm-none-eabi-as
CP=arm-none-eabi-objcopy

# generate list of app objects files to build
OBJS:= $(patsubst %.c, ./$(BUILD_DIR)/%.o, $(SRC))

# generate list of external libraries object files to build
EXTOBJS:= $(patsubst %.c, ./$(BUILD_DIR)/$(ASF_DIR)/$(EXT_DIR)/%.o, $(notdir $(EXTSRC)))

# start-up objects
BOOTOBJS = $(patsubst %.c, ./$(BUILD_DIR)/$(ASF_DIR)/$(BOOT_DIR)/%.o, $(notdir $(BOOTSRC)))

# create bin file
$(PRJ).bin: $(PRJ).hex
	$(CP) -I ihex $(PRJ).hex -O binary $(PRJ).bin

# create hex file
$(PRJ).hex: $(PRJ).elf
	$(CP) -O ihex $(PRJ).elf $(PRJ).hex

#create elf file
$(PRJ).elf: PRJ_DIR $(BOOTOBJS) $(EXTOBJS) $(OBJS)
	@echo " "
	@echo "LINKING OBJECTS FILES"
	$(LD) $(LDFLAGS) -o $@ ./$(BUILD_DIR)/%.o ./$(BUILD_DIR)/$(ASF_DIR)/$(BOOT_DIR)/%.o ./$(BUILD_DIR)/$(ASF_DIR)/$(EXT_DIR)/%.o

# create build directory
PRJ_DIR:
	@echo " "
	@echo "MK PROJECT DIRECTORY"
	mkdir -p ./$(ASF_DIR)
	mkdir -p ./$(ASF_DIR)/$(BOOT_DIR)
	mkdir -p ./$(ASF_DIR)/$(BOOT_DIR)/$(SRC_DIR)
	mkdir -p ./$(ASF_DIR)/$(BOOT_DIR)/$(INC_DIR)
	mkdir -p ./$(ASF_DIR)/$(BOOT_DIR)/$(INC_DIR)/interrupt
	mkdir -p ./$(ASF_DIR)/$(EXT_DIR)
	mkdir -p ./$(ASF_DIR)/$(EXT_DIR)/$(SRC_DIR)
	mkdir -p ./$(ASF_DIR)/$(EXT_DIR)/$(INC_DIR)
	mkdir -p ./$(BUILD_DIR)
	mkdir -p ./$(BUILD_DIR)/$(ASF_DIR)/$(BOOT_DIR)
	mkdir -p ./$(BUILD_DIR)/$(ASF_DIR)/$(EXT_DIR)
	@echo "CP EXTERNAL DEPENDENCIES"
	for file in $(BOOTSRC) ; do \
			cp $$file ./$(ASF_DIR)/$(BOOT_DIR)/$(SRC_DIR)/$(notdir $($file)); \
	done
	for file in $(BOOTINC) ; do \
			cp $$file ./$(ASF_DIR)/$(BOOT_DIR)/$(INC_DIR)/$(notdir $($file)); \
	done
	mv ./$(ASF_DIR)/$(BOOT_DIR)/$(INC_DIR)/interrupt_sam_nvic.h   ./$(ASF_DIR)/$(BOOT_DIR)/$(INC_DIR)/interrupt/interrupt_sam_nvic.h
	for file in $(EXTSRC) ; do \
			cp $$file ./$(ASF_DIR)/$(EXT_DIR)/$(SRC_DIR)/$(notdir $($file)); \
	done


# build start-up files
BOOT_OBJS:
	@echo " "
	@echo "CC $@"
	$(CC) -c $(CFLAGS) $(STARTUP_FILE) -o ./$(BUILD_DIR)/boot/startup_sam3x.o
	$(CC) -c $(CFLAGS) $(SYSTEM_FILE) -o ./$(BUILD_DIR)/boot/system_sam3x.o
	$(CC) -c $(CFLAGS) $(EXCEPETIONS_FILE) -o ./$(BUILD_DIR)/boot/exceptions.o


# compile start-up object files
./$(BUILD_DIR)/$(ASF_DIR)/$(BOOT_DIR)/%.o:		./$(ASF_DIR)/$(BOOT_DIR)/$(SRC_DIR)/%.c
	@echo " "
	@echo "CC $*"
	$(CC) -c $(CFLAGS) $< -o $@


# compile external libraries object files
./$(BUILD_DIR)/$(ASF_DIR)/$(EXT_DIR)/%.o:    ./$(ASF_DIR)/$(EXT_DIR)/$(SRC_DIR)/%.c
	@echo " "
	@echo "CC $*"
	$(CC) -c $(CFLAGS) $< -o $@

# compile app object files
./$(BUILD_DIR)/%.o:	%.c
	@echo " "
	@echo "CC $*"
	$(CC) -c $(CFLAGS) $< -o $@


# user targets
# compile all files
all: $(PRJ).bin

# remove compiled files
clean:
	rm -r $(BUILD_DIR)
	rm *.elf *.bin *.hex
